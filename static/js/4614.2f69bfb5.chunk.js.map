{"version":3,"file":"static/js/4614.2f69bfb5.chunk.js","mappings":"+MAaA,MACMA,EADoBC,SAASC,OAAOC,EAAAA,SAAeC,MAAM,KAAK,IACjB,GAMrC,MAAOC,UAAqBC,EAAAA,UAA1CC,WAAAA,G,oBAGU,KAAAC,OAAQC,EAAAA,EAAAA,aAIR,KAAAC,YAAa,EACb,KAAAC,cAAe,EAEvB,KAAAC,MAAuB,CACrBC,mBAAoB,IAAIC,KA8E1B,KAAAC,cAAgB,KACTC,KAAKL,eACRK,KAAKC,eACLD,KAAKE,SAAWC,uBAAsB,KACpCH,KAAKI,UAAU,I,CAmBvB,CAlGEC,MAAAA,GACE,MAAMC,EAAsC,GAE5C,IAAK,MAAMC,KAAmBP,KAAKJ,MAAMC,mBAAmBW,SAC1DF,EAAqBG,KACnBtB,EAAAA,cAACuB,EAAwB,CACvBC,IAAKJ,EAAgBK,GACrBL,gBAAiBA,KAKvB,OACEpB,EAAAA,cAAA,OAAK0B,IAAKb,KAAKR,OACZc,EAGP,CAEAQ,iBAAAA,GACE,MAAMC,EAAuB,IAAIC,EAAAA,GASjC,IAAIC,EARJjB,KAAKkB,sBAAwBH,EAAqBI,OAAOC,KAAKL,GAE9Df,KAAKqB,SAAW,IAAIC,EAAAA,SAAStB,KAAKR,MAAM+B,QAAOC,OAAAC,OAAAD,OAAAC,OAAA,GAC1CzB,KAAK0B,OAAK,CACbR,sBAAuBlB,KAAKkB,yBAE9BlB,KAAKqB,SAAShB,SAIdU,EAAqBY,WAAW9B,IAC9B,MAAM+B,EAAmBC,KAAKC,MACxBC,GAAcd,GAKlBjC,GAEA+C,GACA/B,KAAKN,YACLM,KAAKL,cACJiC,EAAmBX,EAAwB,IAC1Ce,EACAC,EAAAA,YAEI,KACNjC,KAAKkC,SAAS,CAAErC,uBAAsB,KACpCoB,EAAuBW,EACnBG,EACF/B,KAAKI,WAELJ,KAAKD,e,GAEP,GACF,GAEN,CAEAoC,kBAAAA,GACEnC,KAAKN,YAAa,EAClBM,KAAKqB,SAASe,aAAYZ,OAAAC,OAAAD,OAAAC,OAAC,CAAC,EACvBzB,KAAK0B,OAAK,CACbR,sBAAuBlB,KAAKkB,yBAE9BlB,KAAKN,YAAa,CACpB,CAEA2C,oBAAAA,GACErC,KAAKL,cAAe,EACpBK,KAAKC,eACLD,KAAKqB,SAASiB,SAChB,CAWAlC,QAAAA,GACEJ,KAAKqB,SAASkB,YAChB,CAEAtC,YAAAA,QACwBuC,IAAlBxC,KAAKE,WACPuC,qBAAqBzC,KAAKE,UAC1BF,KAAKE,cAAWsC,EAEpB,CAEAE,MAAAA,GACE,OAAO1C,KAAKqB,QACd,EA9GOhC,EAAAsD,IAAMX,EAwHf,MAAMtB,UAAiCkC,EAAAA,cACrCvC,MAAAA,GACE,MAAM,gBAAEE,GAAoBP,KAAK0B,OAC3B,cAAEmB,GAAkBtC,EACpBuC,EAAiC,oBAAlBD,EACnBA,EAActC,EAAgBwC,aAC9BF,EAEF,OAAOG,EAAAA,EAAAA,cAAaF,EAAOvC,EAAgB0C,YAC7C,EAMF,SAASjB,EAAOkB,GACdA,GACF,C","sources":["../node_modules/@fullcalendar/react/src/index.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { Component, createRef, PureComponent } from 'react'\nimport { createPortal, flushSync } from 'react-dom'\nimport {\n  CalendarOptions,\n  CalendarApi,\n  Calendar,\n} from '@fullcalendar/core'\nimport {\n  CustomRendering,\n  CustomRenderingStore,\n} from '@fullcalendar/core/internal'\n\nconst reactMajorVersion = parseInt(String(React.version).split('.')[0])\nconst syncRenderingByDefault = reactMajorVersion < 18\n\ninterface CalendarState {\n  customRenderingMap: Map<string, CustomRendering<any>>\n}\n\nexport default class FullCalendar extends Component<CalendarOptions, CalendarState> {\n  static act = runNow // DEPRECATED. Not leveraged anymore\n\n  private elRef = createRef<HTMLDivElement>()\n  private calendar: Calendar\n  private handleCustomRendering: (customRendering: CustomRendering<any>) => void\n  private resizeId: number | undefined\n  private isUpdating = false\n  private isUnmounting = false\n\n  state: CalendarState = {\n    customRenderingMap: new Map<string, CustomRendering<any>>()\n  }\n\n  render() {\n    const customRenderingNodes: JSX.Element[] = []\n\n    for (const customRendering of this.state.customRenderingMap.values()) {\n      customRenderingNodes.push(\n        <CustomRenderingComponent\n          key={customRendering.id}\n          customRendering={customRendering}\n        />\n      )\n    }\n\n    return (\n      <div ref={this.elRef}>\n        {customRenderingNodes}\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    const customRenderingStore = new CustomRenderingStore<unknown>()\n    this.handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore)\n\n    this.calendar = new Calendar(this.elRef.current, {\n      ...this.props,\n      handleCustomRendering: this.handleCustomRendering,\n    })\n    this.calendar.render()\n\n    let lastRequestTimestamp: number | undefined\n\n    customRenderingStore.subscribe((customRenderingMap) => {\n      const requestTimestamp = Date.now()\n      const isMounting = !lastRequestTimestamp\n      const runFunc = (\n        // don't call flushSync if React version already does sync rendering by default\n        // guards against fatal errors:\n        // https://github.com/fullcalendar/fullcalendar/issues/7448\n        syncRenderingByDefault ||\n        //\n        isMounting ||\n        this.isUpdating ||\n        this.isUnmounting ||\n        (requestTimestamp - lastRequestTimestamp) < 100 // rerendering frequently\n      ) ? runNow // either sync rendering (first-time or React 16/17) or async (React 18)\n        : flushSync // guaranteed sync rendering\n\n      runFunc(() => {\n        this.setState({ customRenderingMap }, () => {\n          lastRequestTimestamp = requestTimestamp\n          if (isMounting) {\n            this.doResize()\n          } else {\n            this.requestResize()\n          }\n        })\n      })\n    })\n  }\n\n  componentDidUpdate() {\n    this.isUpdating = true\n    this.calendar.resetOptions({\n      ...this.props,\n      handleCustomRendering: this.handleCustomRendering,\n    })\n    this.isUpdating = false\n  }\n\n  componentWillUnmount() {\n    this.isUnmounting = true\n    this.cancelResize()\n    this.calendar.destroy()\n  }\n\n  requestResize = () => {\n    if (!this.isUnmounting) {\n      this.cancelResize()\n      this.resizeId = requestAnimationFrame(() => {\n        this.doResize()\n      })\n    }\n  }\n\n  doResize() {\n    this.calendar.updateSize()\n  }\n\n  cancelResize() {\n    if (this.resizeId !== undefined) {\n      cancelAnimationFrame(this.resizeId)\n      this.resizeId = undefined\n    }\n  }\n\n  getApi(): CalendarApi {\n    return this.calendar\n  }\n}\n\n// Custom Rendering\n// -------------------------------------------------------------------------------------------------\n\ninterface CustomRenderingComponentProps {\n  customRendering: CustomRendering<any>\n}\n\nclass CustomRenderingComponent extends PureComponent<CustomRenderingComponentProps> {\n  render() {\n    const { customRendering } = this.props\n    const { generatorMeta } = customRendering\n    const vnode = typeof generatorMeta === 'function' ?\n      generatorMeta(customRendering.renderProps) :\n      generatorMeta\n\n    return createPortal(vnode, customRendering.containerEl)\n  }\n}\n\n// Util\n// -------------------------------------------------------------------------------------------------\n\nfunction runNow(f: () => void): void {\n  f()\n}\n"],"names":["syncRenderingByDefault","parseInt","String","React","split","FullCalendar","Component","constructor","elRef","createRef","isUpdating","isUnmounting","state","customRenderingMap","Map","requestResize","this","cancelResize","resizeId","requestAnimationFrame","doResize","render","customRenderingNodes","customRendering","values","push","CustomRenderingComponent","key","id","ref","componentDidMount","customRenderingStore","CustomRenderingStore","lastRequestTimestamp","handleCustomRendering","handle","bind","calendar","Calendar","current","Object","assign","props","subscribe","requestTimestamp","Date","now","isMounting","runNow","flushSync","setState","componentDidUpdate","resetOptions","componentWillUnmount","destroy","updateSize","undefined","cancelAnimationFrame","getApi","act","PureComponent","generatorMeta","vnode","renderProps","createPortal","containerEl","f"],"sourceRoot":""}