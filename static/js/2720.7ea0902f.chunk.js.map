{"version":3,"file":"static/js/2720.7ea0902f.chunk.js","mappings":"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","sources":["../node_modules/@fullcalendar/timegrid/internal.js","../node_modules/@fullcalendar/timegrid/index.js"],"sourcesContent":["import { injectStyles, Splitter, hasBgRendering, createFormatter, ViewContextType, ContentContainer, BaseComponent, DateComponent, diffDays, buildNavLinkAttrs, WeekNumberContainer, getStickyHeaderDates, ViewContainer, SimpleScrollGrid, getStickyFooterScrollbar, NowTimer, NowIndicatorContainer, renderScrollShim, rangeContainsMarker, startOfDay, asRoughMs, createDuration, RefMap, PositionCache, MoreLinkContainer, SegHierarchy, groupIntersectingEntries, binarySearch, getEntrySpanEnd, buildEntryKey, StandardEvent, memoize, sortEventSegs, DayCellContainer, hasCustomDayCellContent, getSegMeta, buildIsoString, computeEarliestSegStart, buildEventRangeKey, BgEvent, renderFill, addDurations, multiplyDuration, wholeDivideDurations, Slicer, intersectRanges, formatIsoTimeString, DayHeader, DaySeriesModel, DayTableModel } from '@fullcalendar/core/internal.js';\nimport { createElement, createRef, Fragment } from '@fullcalendar/core/preact.js';\nimport { DayTable } from '@fullcalendar/daygrid/internal.js';\n\nvar css_248z = \".fc-v-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-v-event .fc-event-main{color:var(--fc-event-text-color);height:100%}.fc-v-event .fc-event-main-frame{display:flex;flex-direction:column;height:100%}.fc-v-event .fc-event-time{flex-grow:0;flex-shrink:0;max-height:100%;overflow:hidden}.fc-v-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-height:0}.fc-v-event .fc-event-title{bottom:0;max-height:100%;overflow:hidden;top:0}.fc-v-event:not(.fc-event-start){border-top-left-radius:0;border-top-right-radius:0;border-top-width:0}.fc-v-event:not(.fc-event-end){border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-width:0}.fc-v-event.fc-event-selected:before{left:-10px;right:-10px}.fc-v-event .fc-event-resizer-start{cursor:n-resize}.fc-v-event .fc-event-resizer-end{cursor:s-resize}.fc-v-event:not(.fc-event-selected) .fc-event-resizer{height:var(--fc-event-resizer-thickness);left:0;right:0}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-start{top:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer{left:50%;margin-left:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-start{top:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc .fc-timegrid .fc-daygrid-body{z-index:2}.fc .fc-timegrid-divider{padding:0 0 2px}.fc .fc-timegrid-body{min-height:100%;position:relative;z-index:1}.fc .fc-timegrid-axis-chunk{position:relative}.fc .fc-timegrid-axis-chunk>table,.fc .fc-timegrid-slots{position:relative;z-index:1}.fc .fc-timegrid-slot{border-bottom:0;height:1.5em}.fc .fc-timegrid-slot:empty:before{content:\\\"\\\\00a0\\\"}.fc .fc-timegrid-slot-minor{border-top-style:dotted}.fc .fc-timegrid-slot-label-cushion{display:inline-block;white-space:nowrap}.fc .fc-timegrid-slot-label{vertical-align:middle}.fc .fc-timegrid-axis-cushion,.fc .fc-timegrid-slot-label-cushion{padding:0 4px}.fc .fc-timegrid-axis-frame-liquid{height:100%}.fc .fc-timegrid-axis-frame{align-items:center;display:flex;justify-content:flex-end;overflow:hidden}.fc .fc-timegrid-axis-cushion{flex-shrink:0;max-width:60px}.fc-direction-ltr .fc-timegrid-slot-label-frame{text-align:right}.fc-direction-rtl .fc-timegrid-slot-label-frame{text-align:left}.fc-liquid-hack .fc-timegrid-axis-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-timegrid-col-frame{min-height:100%;position:relative}.fc-media-screen.fc-liquid-hack .fc-timegrid-col-frame{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols{bottom:0;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols>table{height:100%}.fc-media-screen .fc-timegrid-col-bg,.fc-media-screen .fc-timegrid-col-events,.fc-media-screen .fc-timegrid-now-indicator-container{left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col-bg{z-index:2}.fc .fc-timegrid-col-bg .fc-non-business{z-index:1}.fc .fc-timegrid-col-bg .fc-bg-event{z-index:2}.fc .fc-timegrid-col-bg .fc-highlight{z-index:3}.fc .fc-timegrid-bg-harness{left:0;position:absolute;right:0}.fc .fc-timegrid-col-events{z-index:3}.fc .fc-timegrid-now-indicator-container{bottom:0;overflow:hidden}.fc-direction-ltr .fc-timegrid-col-events{margin:0 2.5% 0 2px}.fc-direction-rtl .fc-timegrid-col-events{margin:0 2px 0 2.5%}.fc-timegrid-event-harness{position:absolute}.fc-timegrid-event-harness>.fc-timegrid-event{bottom:0;left:0;position:absolute;right:0;top:0}.fc-timegrid-event-harness-inset .fc-timegrid-event,.fc-timegrid-event.fc-event-mirror,.fc-timegrid-more-link{box-shadow:0 0 0 1px var(--fc-page-bg-color)}.fc-timegrid-event,.fc-timegrid-more-link{border-radius:3px;font-size:var(--fc-small-font-size)}.fc-timegrid-event{margin-bottom:1px}.fc-timegrid-event .fc-event-main{padding:1px 1px 0}.fc-timegrid-event .fc-event-time{font-size:var(--fc-small-font-size);margin-bottom:1px;white-space:nowrap}.fc-timegrid-event-short .fc-event-main-frame{flex-direction:row;overflow:hidden}.fc-timegrid-event-short .fc-event-time:after{content:\\\"\\\\00a0-\\\\00a0\\\"}.fc-timegrid-event-short .fc-event-title{font-size:var(--fc-small-font-size)}.fc-timegrid-more-link{background:var(--fc-more-link-bg-color);color:var(--fc-more-link-text-color);cursor:pointer;margin-bottom:1px;position:absolute;z-index:9999}.fc-timegrid-more-link-inner{padding:3px 2px;top:0}.fc-direction-ltr .fc-timegrid-more-link{right:0}.fc-direction-rtl .fc-timegrid-more-link{left:0}.fc .fc-timegrid-now-indicator-line{border-color:var(--fc-now-indicator-color);border-style:solid;border-width:1px 0 0;left:0;position:absolute;right:0;z-index:4}.fc .fc-timegrid-now-indicator-arrow{border-color:var(--fc-now-indicator-color);border-style:solid;margin-top:-5px;position:absolute;z-index:4}.fc-direction-ltr .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 0 5px 6px;left:0}.fc-direction-rtl .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 6px 5px 0;right:0}\";\ninjectStyles(css_248z);\n\nclass AllDaySplitter extends Splitter {\n    getKeyInfo() {\n        return {\n            allDay: {},\n            timed: {},\n        };\n    }\n    getKeysForDateSpan(dateSpan) {\n        if (dateSpan.allDay) {\n            return ['allDay'];\n        }\n        return ['timed'];\n    }\n    getKeysForEventDef(eventDef) {\n        if (!eventDef.allDay) {\n            return ['timed'];\n        }\n        if (hasBgRendering(eventDef)) {\n            return ['timed', 'allDay'];\n        }\n        return ['allDay'];\n    }\n}\n\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n    hour: 'numeric',\n    minute: '2-digit',\n    omitZeroMinute: true,\n    meridiem: 'short',\n});\nfunction TimeColsAxisCell(props) {\n    let classNames = [\n        'fc-timegrid-slot',\n        'fc-timegrid-slot-label',\n        props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor',\n    ];\n    return (createElement(ViewContextType.Consumer, null, (context) => {\n        if (!props.isLabeled) {\n            return (createElement(\"td\", { className: classNames.join(' '), \"data-time\": props.isoTimeStr }));\n        }\n        let { dateEnv, options, viewApi } = context;\n        let labelFormat = // TODO: fully pre-parse\n         options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT :\n            Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) :\n                createFormatter(options.slotLabelFormat);\n        let renderProps = {\n            level: 0,\n            time: props.time,\n            date: dateEnv.toDate(props.date),\n            view: viewApi,\n            text: dateEnv.format(props.date, labelFormat),\n        };\n        return (createElement(ContentContainer, { elTag: \"td\", elClasses: classNames, elAttrs: {\n                'data-time': props.isoTimeStr,\n            }, renderProps: renderProps, generatorName: \"slotLabelContent\", customGenerator: options.slotLabelContent, defaultGenerator: renderInnerContent, classNameGenerator: options.slotLabelClassNames, didMount: options.slotLabelDidMount, willUnmount: options.slotLabelWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\" },\n            createElement(InnerContent, { elTag: \"div\", elClasses: [\n                    'fc-timegrid-slot-label-cushion',\n                    'fc-scrollgrid-shrink-cushion',\n                ] })))));\n    }));\n}\nfunction renderInnerContent(props) {\n    return props.text;\n}\n\nclass TimeBodyAxis extends BaseComponent {\n    render() {\n        return this.props.slatMetas.map((slatMeta) => (createElement(\"tr\", { key: slatMeta.key },\n            createElement(TimeColsAxisCell, Object.assign({}, slatMeta)))));\n    }\n}\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'short' });\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\nclass TimeColsView extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n        this.headerElRef = createRef();\n        this.rootElRef = createRef();\n        this.scrollerElRef = createRef();\n        this.state = {\n            slatCoords: null,\n        };\n        this.handleScrollTopRequest = (scrollTop) => {\n            let scrollerEl = this.scrollerElRef.current;\n            if (scrollerEl) { // TODO: not sure how this could ever be null. weirdness with the reducer\n                scrollerEl.scrollTop = scrollTop;\n            }\n        };\n        /* Header Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        this.renderHeadAxis = (rowKey, frameHeight = '') => {\n            let { options } = this.context;\n            let { dateProfile } = this.props;\n            let range = dateProfile.renderRange;\n            let dayCnt = diffDays(range.start, range.end);\n            // only do in day views (to avoid doing in week views that dont need it)\n            let navLinkAttrs = (dayCnt === 1)\n                ? buildNavLinkAttrs(this.context, range.start, 'week')\n                : {};\n            if (options.weekNumbers && rowKey === 'day') {\n                return (createElement(WeekNumberContainer, { elTag: \"th\", elClasses: [\n                        'fc-timegrid-axis',\n                        'fc-scrollgrid-shrink',\n                    ], elAttrs: {\n                        'aria-hidden': true,\n                    }, date: range.start, defaultFormat: DEFAULT_WEEK_NUM_FORMAT }, (InnerContent) => (createElement(\"div\", { className: [\n                        'fc-timegrid-axis-frame',\n                        'fc-scrollgrid-shrink-frame',\n                        'fc-timegrid-axis-frame-liquid',\n                    ].join(' '), style: { height: frameHeight } },\n                    createElement(InnerContent, { elTag: \"a\", elClasses: [\n                            'fc-timegrid-axis-cushion',\n                            'fc-scrollgrid-shrink-cushion',\n                            'fc-scrollgrid-sync-inner',\n                        ], elAttrs: navLinkAttrs })))));\n            }\n            return (createElement(\"th\", { \"aria-hidden\": true, className: \"fc-timegrid-axis\" },\n                createElement(\"div\", { className: \"fc-timegrid-axis-frame\", style: { height: frameHeight } })));\n        };\n        /* Table Component Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n        // but DayGrid still needs to have classNames on inner elements in order to measure.\n        this.renderTableRowAxis = (rowHeight) => {\n            let { options, viewApi } = this.context;\n            let renderProps = {\n                text: options.allDayText,\n                view: viewApi,\n            };\n            return (\n            // TODO: make reusable hook. used in list view too\n            createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                    'fc-timegrid-axis',\n                    'fc-scrollgrid-shrink',\n                ], elAttrs: {\n                    'aria-hidden': true,\n                }, renderProps: renderProps, generatorName: \"allDayContent\", customGenerator: options.allDayContent, defaultGenerator: renderAllDayInner, classNameGenerator: options.allDayClassNames, didMount: options.allDayDidMount, willUnmount: options.allDayWillUnmount }, (InnerContent) => (createElement(\"div\", { className: [\n                    'fc-timegrid-axis-frame',\n                    'fc-scrollgrid-shrink-frame',\n                    rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : '',\n                ].join(' '), style: { height: rowHeight } },\n                createElement(InnerContent, { elTag: \"span\", elClasses: [\n                        'fc-timegrid-axis-cushion',\n                        'fc-scrollgrid-shrink-cushion',\n                        'fc-scrollgrid-sync-inner',\n                    ] })))));\n        };\n        this.handleSlatCoords = (slatCoords) => {\n            this.setState({ slatCoords });\n        };\n    }\n    // rendering\n    // ----------------------------------------------------------------------------------------------------\n    renderSimpleLayout(headerRowContent, allDayContent, timeContent) {\n        let { context, props } = this;\n        let sections = [];\n        let stickyHeaderDates = getStickyHeaderDates(context.options);\n        if (headerRowContent) {\n            sections.push({\n                type: 'header',\n                key: 'header',\n                isSticky: stickyHeaderDates,\n                chunk: {\n                    elRef: this.headerElRef,\n                    tableClassName: 'fc-col-header',\n                    rowContent: headerRowContent,\n                },\n            });\n        }\n        if (allDayContent) {\n            sections.push({\n                type: 'body',\n                key: 'all-day',\n                chunk: { content: allDayContent },\n            });\n            sections.push({\n                type: 'body',\n                key: 'all-day-divider',\n                outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n                createElement(\"tr\", { role: \"presentation\", className: \"fc-scrollgrid-section\" },\n                    createElement(\"td\", { className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded') }))),\n            });\n        }\n        sections.push({\n            type: 'body',\n            key: 'body',\n            liquid: true,\n            expandRows: Boolean(context.options.expandRows),\n            chunk: {\n                scrollerElRef: this.scrollerElRef,\n                content: timeContent,\n            },\n        });\n        return (createElement(ViewContainer, { elRef: this.rootElRef, elClasses: ['fc-timegrid'], viewSpec: context.viewSpec },\n            createElement(SimpleScrollGrid, { liquid: !props.isHeightAuto && !props.forPrint, collapsibleWidth: props.forPrint, cols: [{ width: 'shrink' }], sections: sections })));\n    }\n    renderHScrollLayout(headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n        let ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n        if (!ScrollGrid) {\n            throw new Error('No ScrollGrid implementation');\n        }\n        let { context, props } = this;\n        let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n        let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n        let sections = [];\n        if (headerRowContent) {\n            sections.push({\n                type: 'header',\n                key: 'header',\n                isSticky: stickyHeaderDates,\n                syncRowHeights: true,\n                chunks: [\n                    {\n                        key: 'axis',\n                        rowContent: (arg) => (createElement(\"tr\", { role: \"presentation\" }, this.renderHeadAxis('day', arg.rowSyncHeights[0]))),\n                    },\n                    {\n                        key: 'cols',\n                        elRef: this.headerElRef,\n                        tableClassName: 'fc-col-header',\n                        rowContent: headerRowContent,\n                    },\n                ],\n            });\n        }\n        if (allDayContent) {\n            sections.push({\n                type: 'body',\n                key: 'all-day',\n                syncRowHeights: true,\n                chunks: [\n                    {\n                        key: 'axis',\n                        rowContent: (contentArg) => (createElement(\"tr\", { role: \"presentation\" }, this.renderTableRowAxis(contentArg.rowSyncHeights[0]))),\n                    },\n                    {\n                        key: 'cols',\n                        content: allDayContent,\n                    },\n                ],\n            });\n            sections.push({\n                key: 'all-day-divider',\n                type: 'body',\n                outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n                createElement(\"tr\", { role: \"presentation\", className: \"fc-scrollgrid-section\" },\n                    createElement(\"td\", { colSpan: 2, className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded') }))),\n            });\n        }\n        let isNowIndicator = context.options.nowIndicator;\n        sections.push({\n            type: 'body',\n            key: 'body',\n            liquid: true,\n            expandRows: Boolean(context.options.expandRows),\n            chunks: [\n                {\n                    key: 'axis',\n                    content: (arg) => (\n                    // TODO: make this now-indicator arrow more DRY with TimeColsContent\n                    createElement(\"div\", { className: \"fc-timegrid-axis-chunk\" },\n                        createElement(\"table\", { \"aria-hidden\": true, style: { height: arg.expandRows ? arg.clientHeight : '' } },\n                            arg.tableColGroupNode,\n                            createElement(\"tbody\", null,\n                                createElement(TimeBodyAxis, { slatMetas: slatMetas }))),\n                        createElement(\"div\", { className: \"fc-timegrid-now-indicator-container\" },\n                            createElement(NowTimer, { unit: isNowIndicator ? 'minute' : 'day' /* hacky */ }, (nowDate) => {\n                                let nowIndicatorTop = isNowIndicator &&\n                                    slatCoords &&\n                                    slatCoords.safeComputeTop(nowDate); // might return void\n                                if (typeof nowIndicatorTop === 'number') {\n                                    return (createElement(NowIndicatorContainer, { elClasses: ['fc-timegrid-now-indicator-arrow'], elStyle: { top: nowIndicatorTop }, isAxis: true, date: nowDate }));\n                                }\n                                return null;\n                            })))),\n                },\n                {\n                    key: 'cols',\n                    scrollerElRef: this.scrollerElRef,\n                    content: timeContent,\n                },\n            ],\n        });\n        if (stickyFooterScrollbar) {\n            sections.push({\n                key: 'footer',\n                type: 'footer',\n                isSticky: true,\n                chunks: [\n                    {\n                        key: 'axis',\n                        content: renderScrollShim,\n                    },\n                    {\n                        key: 'cols',\n                        content: renderScrollShim,\n                    },\n                ],\n            });\n        }\n        return (createElement(ViewContainer, { elRef: this.rootElRef, elClasses: ['fc-timegrid'], viewSpec: context.viewSpec },\n            createElement(ScrollGrid, { liquid: !props.isHeightAuto && !props.forPrint, forPrint: props.forPrint, collapsibleWidth: false, colGroups: [\n                    { width: 'shrink', cols: [{ width: 'shrink' }] },\n                    { cols: [{ span: colCnt, minWidth: dayMinWidth }] },\n                ], sections: sections })));\n    }\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/\n    getAllDayMaxEventProps() {\n        let { dayMaxEvents, dayMaxEventRows } = this.context.options;\n        if (dayMaxEvents === true || dayMaxEventRows === true) { // is auto?\n            dayMaxEvents = undefined;\n            dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n        }\n        return { dayMaxEvents, dayMaxEventRows };\n    }\n}\nfunction renderAllDayInner(renderProps) {\n    return renderProps.text;\n}\n\nclass TimeColsSlatsCoords {\n    constructor(positions, dateProfile, slotDuration) {\n        this.positions = positions;\n        this.dateProfile = dateProfile;\n        this.slotDuration = slotDuration;\n    }\n    safeComputeTop(date) {\n        let { dateProfile } = this;\n        if (rangeContainsMarker(dateProfile.currentRange, date)) {\n            let startOfDayDate = startOfDay(date);\n            let timeMs = date.valueOf() - startOfDayDate.valueOf();\n            if (timeMs >= asRoughMs(dateProfile.slotMinTime) &&\n                timeMs < asRoughMs(dateProfile.slotMaxTime)) {\n                return this.computeTimeTop(createDuration(timeMs));\n            }\n        }\n        return null;\n    }\n    // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n    computeDateTop(when, startOfDayDate) {\n        if (!startOfDayDate) {\n            startOfDayDate = startOfDay(when);\n        }\n        return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n    }\n    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n    // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n    // Eventually allow computation with arbirary slat dates.\n    computeTimeTop(duration) {\n        let { positions, dateProfile } = this;\n        let len = positions.els.length;\n        // floating-point value of # of slots covered\n        let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration);\n        let slatIndex;\n        let slatRemainder;\n        // compute a floating-point number for how many slats should be progressed through.\n        // from 0 to number of slats (inclusive)\n        // constrained because slotMinTime/slotMaxTime might be customized.\n        slatCoverage = Math.max(0, slatCoverage);\n        slatCoverage = Math.min(len, slatCoverage);\n        // an integer index of the furthest whole slat\n        // from 0 to number slats (*exclusive*, so len-1)\n        slatIndex = Math.floor(slatCoverage);\n        slatIndex = Math.min(slatIndex, len - 1);\n        // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n        // could be 1.0 if slatCoverage is covering *all* the slots\n        slatRemainder = slatCoverage - slatIndex;\n        return positions.tops[slatIndex] +\n            positions.getHeight(slatIndex) * slatRemainder;\n    }\n}\n\nclass TimeColsSlatsBody extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { options } = context;\n        let { slatElRefs } = props;\n        return (createElement(\"tbody\", null, props.slatMetas.map((slatMeta, i) => {\n            let renderProps = {\n                time: slatMeta.time,\n                date: context.dateEnv.toDate(slatMeta.date),\n                view: context.viewApi,\n            };\n            return (createElement(\"tr\", { key: slatMeta.key, ref: slatElRefs.createRef(slatMeta.key) },\n                props.axis && (createElement(TimeColsAxisCell, Object.assign({}, slatMeta))),\n                createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                        'fc-timegrid-slot',\n                        'fc-timegrid-slot-lane',\n                        !slatMeta.isLabeled && 'fc-timegrid-slot-minor',\n                    ], elAttrs: {\n                        'data-time': slatMeta.isoTimeStr,\n                    }, renderProps: renderProps, generatorName: \"slotLaneContent\", customGenerator: options.slotLaneContent, classNameGenerator: options.slotLaneClassNames, didMount: options.slotLaneDidMount, willUnmount: options.slotLaneWillUnmount })));\n        })));\n    }\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\nclass TimeColsSlats extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.rootElRef = createRef();\n        this.slatElRefs = new RefMap();\n    }\n    render() {\n        let { props, context } = this;\n        return (createElement(\"div\", { ref: this.rootElRef, className: \"fc-timegrid-slots\" },\n            createElement(\"table\", { \"aria-hidden\": true, className: context.theme.getClass('table'), style: {\n                    minWidth: props.tableMinWidth,\n                    width: props.clientWidth,\n                    height: props.minHeight,\n                } },\n                props.tableColGroupNode /* relies on there only being a single <col> for the axis */,\n                createElement(TimeColsSlatsBody, { slatElRefs: this.slatElRefs, axis: props.axis, slatMetas: props.slatMetas }))));\n    }\n    componentDidMount() {\n        this.updateSizing();\n    }\n    componentDidUpdate() {\n        this.updateSizing();\n    }\n    componentWillUnmount() {\n        if (this.props.onCoords) {\n            this.props.onCoords(null);\n        }\n    }\n    updateSizing() {\n        let { context, props } = this;\n        if (props.onCoords &&\n            props.clientWidth !== null // means sizing has stabilized\n        ) {\n            let rootEl = this.rootElRef.current;\n            if (rootEl.offsetHeight) { // not hidden by css\n                props.onCoords(new TimeColsSlatsCoords(new PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n            }\n        }\n    }\n}\nfunction collectSlatEls(elMap, slatMetas) {\n    return slatMetas.map((slatMeta) => elMap[slatMeta.key]);\n}\n\nfunction splitSegsByCol(segs, colCnt) {\n    let segsByCol = [];\n    let i;\n    for (i = 0; i < colCnt; i += 1) {\n        segsByCol.push([]);\n    }\n    if (segs) {\n        for (i = 0; i < segs.length; i += 1) {\n            segsByCol[segs[i].col].push(segs[i]);\n        }\n    }\n    return segsByCol;\n}\nfunction splitInteractionByCol(ui, colCnt) {\n    let byRow = [];\n    if (!ui) {\n        for (let i = 0; i < colCnt; i += 1) {\n            byRow[i] = null;\n        }\n    }\n    else {\n        for (let i = 0; i < colCnt; i += 1) {\n            byRow[i] = {\n                affectedInstances: ui.affectedInstances,\n                isEvent: ui.isEvent,\n                segs: [],\n            };\n        }\n        for (let seg of ui.segs) {\n            byRow[seg.col].segs.push(seg);\n        }\n    }\n    return byRow;\n}\n\nclass TimeColMoreLink extends BaseComponent {\n    render() {\n        let { props } = this;\n        return (createElement(MoreLinkContainer, { elClasses: ['fc-timegrid-more-link'], elStyle: {\n                top: props.top,\n                bottom: props.bottom,\n            }, allDayDate: null, moreCnt: props.hiddenSegs.length, allSegs: props.hiddenSegs, hiddenSegs: props.hiddenSegs, extraDateSpan: props.extraDateSpan, dateProfile: props.dateProfile, todayRange: props.todayRange, popoverContent: () => renderPlainFgSegs(props.hiddenSegs, props), defaultGenerator: renderMoreLinkInner, forceTimed: true }, (InnerContent) => (createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-timegrid-more-link-inner', 'fc-sticky'] }))));\n    }\n}\nfunction renderMoreLinkInner(props) {\n    return props.shortText;\n}\n\n// segInputs assumed sorted\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n    let hierarchy = new SegHierarchy();\n    if (strictOrder != null) {\n        hierarchy.strictOrder = strictOrder;\n    }\n    if (maxStackCnt != null) {\n        hierarchy.maxStackCnt = maxStackCnt;\n    }\n    let hiddenEntries = hierarchy.addSegs(segInputs);\n    let hiddenGroups = groupIntersectingEntries(hiddenEntries);\n    let web = buildWeb(hierarchy);\n    web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n    let segRects = webToRects(web);\n    return { segRects, hiddenGroups };\n}\nfunction buildWeb(hierarchy) {\n    const { entriesByLevel } = hierarchy;\n    const buildNode = cacheable((level, lateral) => level + ':' + lateral, (level, lateral) => {\n        let siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n        let nextLevelRes = buildNodes(siblingRange, buildNode);\n        let entry = entriesByLevel[level][lateral];\n        return [\n            Object.assign(Object.assign({}, entry), { nextLevelNodes: nextLevelRes[0] }),\n            entry.thickness + nextLevelRes[1], // the pressure builds\n        ];\n    });\n    return buildNodes(entriesByLevel.length\n        ? { level: 0, lateralStart: 0, lateralEnd: entriesByLevel[0].length }\n        : null, buildNode)[0];\n}\nfunction buildNodes(siblingRange, buildNode) {\n    if (!siblingRange) {\n        return [[], 0];\n    }\n    let { level, lateralStart, lateralEnd } = siblingRange;\n    let lateral = lateralStart;\n    let pairs = [];\n    while (lateral < lateralEnd) {\n        pairs.push(buildNode(level, lateral));\n        lateral += 1;\n    }\n    pairs.sort(cmpDescPressures);\n    return [\n        pairs.map(extractNode),\n        pairs[0][1], // first item's pressure\n    ];\n}\nfunction cmpDescPressures(a, b) {\n    return b[1] - a[1];\n}\nfunction extractNode(a) {\n    return a[0];\n}\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n    let { levelCoords, entriesByLevel } = hierarchy;\n    let subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n    let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n    let levelCnt = levelCoords.length;\n    let level = subjectLevel;\n    // skip past levels that are too high up\n    for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1)\n        ; // do nothing\n    for (; level < levelCnt; level += 1) {\n        let entries = entriesByLevel[level];\n        let entry;\n        let searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd);\n        let lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n        let lateralEnd = lateralStart;\n        while ( // loop through entries that horizontally intersect\n        (entry = entries[lateralEnd]) && // but not past the whole seg list\n            entry.span.start < subjectEntry.span.end) {\n            lateralEnd += 1;\n        }\n        if (lateralStart < lateralEnd) {\n            return { level, lateralStart, lateralEnd };\n        }\n    }\n    return null;\n}\nfunction stretchWeb(topLevelNodes, totalThickness) {\n    const stretchNode = cacheable((node, startCoord, prevThickness) => buildEntryKey(node), (node, startCoord, prevThickness) => {\n        let { nextLevelNodes, thickness } = node;\n        let allThickness = thickness + prevThickness;\n        let thicknessFraction = thickness / allThickness;\n        let endCoord;\n        let newChildren = [];\n        if (!nextLevelNodes.length) {\n            endCoord = totalThickness;\n        }\n        else {\n            for (let childNode of nextLevelNodes) {\n                if (endCoord === undefined) {\n                    let res = stretchNode(childNode, startCoord, allThickness);\n                    endCoord = res[0];\n                    newChildren.push(res[1]);\n                }\n                else {\n                    let res = stretchNode(childNode, endCoord, 0);\n                    newChildren.push(res[1]);\n                }\n            }\n        }\n        let newThickness = (endCoord - startCoord) * thicknessFraction;\n        return [endCoord - newThickness, Object.assign(Object.assign({}, node), { thickness: newThickness, nextLevelNodes: newChildren })];\n    });\n    return topLevelNodes.map((node) => stretchNode(node, 0, 0)[1]);\n}\n// not sorted in any particular order\nfunction webToRects(topLevelNodes) {\n    let rects = [];\n    const processNode = cacheable((node, levelCoord, stackDepth) => buildEntryKey(node), (node, levelCoord, stackDepth) => {\n        let rect = Object.assign(Object.assign({}, node), { levelCoord,\n            stackDepth, stackForward: 0 });\n        rects.push(rect);\n        return (rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1);\n    });\n    function processNodes(nodes, levelCoord, stackDepth) {\n        let stackForward = 0;\n        for (let node of nodes) {\n            stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n        }\n        return stackForward;\n    }\n    processNodes(topLevelNodes, 0, 0);\n    return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n// TODO: move to general util\nfunction cacheable(keyFunc, workFunc) {\n    const cache = {};\n    return (...args) => {\n        let key = keyFunc(...args);\n        return (key in cache)\n            ? cache[key]\n            : (cache[key] = workFunc(...args));\n    };\n}\n\nfunction computeSegVCoords(segs, colDate, slatCoords = null, eventMinHeight = 0) {\n    let vcoords = [];\n    if (slatCoords) {\n        for (let i = 0; i < segs.length; i += 1) {\n            let seg = segs[i];\n            let spanStart = slatCoords.computeDateTop(seg.start, colDate);\n            let spanEnd = Math.max(spanStart + (eventMinHeight || 0), // :(\n            slatCoords.computeDateTop(seg.end, colDate));\n            vcoords.push({\n                start: Math.round(spanStart),\n                end: Math.round(spanEnd), //\n            });\n        }\n    }\n    return vcoords;\n}\nfunction computeFgSegPlacements(segs, segVCoords, // might not have for every seg\neventOrderStrict, eventMaxStack) {\n    let segInputs = [];\n    let dumbSegs = []; // segs without coords\n    for (let i = 0; i < segs.length; i += 1) {\n        let vcoords = segVCoords[i];\n        if (vcoords) {\n            segInputs.push({\n                index: i,\n                thickness: 1,\n                span: vcoords,\n            });\n        }\n        else {\n            dumbSegs.push(segs[i]);\n        }\n    }\n    let { segRects, hiddenGroups } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack);\n    let segPlacements = [];\n    for (let segRect of segRects) {\n        segPlacements.push({\n            seg: segs[segRect.index],\n            rect: segRect,\n        });\n    }\n    for (let dumbSeg of dumbSegs) {\n        segPlacements.push({ seg: dumbSeg, rect: null });\n    }\n    return { segPlacements, hiddenGroups };\n}\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n    hour: 'numeric',\n    minute: '2-digit',\n    meridiem: false,\n});\nclass TimeColEvent extends BaseComponent {\n    render() {\n        return (createElement(StandardEvent, Object.assign({}, this.props, { elClasses: [\n                'fc-timegrid-event',\n                'fc-v-event',\n                this.props.isShort && 'fc-timegrid-event-short',\n            ], defaultTimeFormat: DEFAULT_TIME_FORMAT })));\n    }\n}\n\nclass TimeCol extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.sortEventSegs = memoize(sortEventSegs);\n    }\n    // TODO: memoize event-placement?\n    render() {\n        let { props, context } = this;\n        let { options } = context;\n        let isSelectMirror = options.selectMirror;\n        let mirrorSegs = // yuck\n         (props.eventDrag && props.eventDrag.segs) ||\n            (props.eventResize && props.eventResize.segs) ||\n            (isSelectMirror && props.dateSelectionSegs) ||\n            [];\n        let interactionAffectedInstances = // TODO: messy way to compute this\n         (props.eventDrag && props.eventDrag.affectedInstances) ||\n            (props.eventResize && props.eventResize.affectedInstances) ||\n            {};\n        let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, options.eventOrder);\n        return (createElement(DayCellContainer, { elTag: \"td\", elRef: props.elRef, elClasses: [\n                'fc-timegrid-col',\n                ...(props.extraClassNames || []),\n            ], elAttrs: Object.assign({ role: 'gridcell' }, props.extraDataAttrs), date: props.date, dateProfile: props.dateProfile, todayRange: props.todayRange, extraRenderProps: props.extraRenderProps }, (InnerContent) => (createElement(\"div\", { className: \"fc-timegrid-col-frame\" },\n            createElement(\"div\", { className: \"fc-timegrid-col-bg\" },\n                this.renderFillSegs(props.businessHourSegs, 'non-business'),\n                this.renderFillSegs(props.bgEventSegs, 'bg-event'),\n                this.renderFillSegs(props.dateSelectionSegs, 'highlight')),\n            createElement(\"div\", { className: \"fc-timegrid-col-events\" }, this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)),\n            createElement(\"div\", { className: \"fc-timegrid-col-events\" }, this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror), 'mirror')),\n            createElement(\"div\", { className: \"fc-timegrid-now-indicator-container\" }, this.renderNowIndicator(props.nowIndicatorSegs)),\n            hasCustomDayCellContent(options) && (createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-timegrid-col-misc'] }))))));\n    }\n    renderFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {\n        let { props } = this;\n        if (props.forPrint) {\n            return renderPlainFgSegs(sortedFgSegs, props);\n        }\n        return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey);\n    }\n    renderPositionedFgSegs(segs, // if not mirror, needs to be sorted\n    segIsInvisible, isDragging, isResizing, isDateSelecting, forcedKey) {\n        let { eventMaxStack, eventShortHeight, eventOrderStrict, eventMinHeight } = this.context.options;\n        let { date, slatCoords, eventSelection, todayRange, nowDate } = this.props;\n        let isMirror = isDragging || isResizing || isDateSelecting;\n        let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n        let { segPlacements, hiddenGroups } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack);\n        return (createElement(Fragment, null,\n            this.renderHiddenGroups(hiddenGroups, segs),\n            segPlacements.map((segPlacement) => {\n                let { seg, rect } = segPlacement;\n                let instanceId = seg.eventRange.instance.instanceId;\n                let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n                let vStyle = computeSegVStyle(rect && rect.span);\n                let hStyle = (!isMirror && rect) ? this.computeSegHStyle(rect) : { left: 0, right: 0 };\n                let isInset = Boolean(rect) && rect.stackForward > 0;\n                let isShort = Boolean(rect) && (rect.span.end - rect.span.start) < eventShortHeight; // look at other places for this problem\n                return (createElement(\"div\", { className: 'fc-timegrid-event-harness' +\n                        (isInset ? ' fc-timegrid-event-harness-inset' : ''), key: forcedKey || instanceId, style: Object.assign(Object.assign({ visibility: isVisible ? '' : 'hidden' }, vStyle), hStyle) },\n                    createElement(TimeColEvent, Object.assign({ seg: seg, isDragging: isDragging, isResizing: isResizing, isDateSelecting: isDateSelecting, isSelected: instanceId === eventSelection, isShort: isShort }, getSegMeta(seg, todayRange, nowDate)))));\n            })));\n    }\n    // will already have eventMinHeight applied because segInputs already had it\n    renderHiddenGroups(hiddenGroups, segs) {\n        let { extraDateSpan, dateProfile, todayRange, nowDate, eventSelection, eventDrag, eventResize } = this.props;\n        return (createElement(Fragment, null, hiddenGroups.map((hiddenGroup) => {\n            let positionCss = computeSegVStyle(hiddenGroup.span);\n            let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n            return (createElement(TimeColMoreLink, { key: buildIsoString(computeEarliestSegStart(hiddenSegs)), hiddenSegs: hiddenSegs, top: positionCss.top, bottom: positionCss.bottom, extraDateSpan: extraDateSpan, dateProfile: dateProfile, todayRange: todayRange, nowDate: nowDate, eventSelection: eventSelection, eventDrag: eventDrag, eventResize: eventResize }));\n        })));\n    }\n    renderFillSegs(segs, fillType) {\n        let { props, context } = this;\n        let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n        let children = segVCoords.map((vcoords, i) => {\n            let seg = segs[i];\n            return (createElement(\"div\", { key: buildEventRangeKey(seg.eventRange), className: \"fc-timegrid-bg-harness\", style: computeSegVStyle(vcoords) }, fillType === 'bg-event' ?\n                createElement(BgEvent, Object.assign({ seg: seg }, getSegMeta(seg, props.todayRange, props.nowDate))) :\n                renderFill(fillType)));\n        });\n        return createElement(Fragment, null, children);\n    }\n    renderNowIndicator(segs) {\n        let { slatCoords, date } = this.props;\n        if (!slatCoords) {\n            return null;\n        }\n        return segs.map((seg, i) => (createElement(NowIndicatorContainer\n        // key doesn't matter. will only ever be one\n        , { \n            // key doesn't matter. will only ever be one\n            key: i, elClasses: ['fc-timegrid-now-indicator-line'], elStyle: {\n                top: slatCoords.computeDateTop(seg.start, date),\n            }, isAxis: false, date: date })));\n    }\n    computeSegHStyle(segHCoords) {\n        let { isRtl, options } = this.context;\n        let shouldOverlap = options.slotEventOverlap;\n        let nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n        let farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n        let left; // amount of space from left edge, a fraction of the total width\n        let right; // amount of space from right edge, a fraction of the total width\n        if (shouldOverlap) {\n            // double the width, but don't go beyond the maximum forward coordinate (1.0)\n            farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n        }\n        if (isRtl) {\n            left = 1 - farCoord;\n            right = nearCoord;\n        }\n        else {\n            left = nearCoord;\n            right = 1 - farCoord;\n        }\n        let props = {\n            zIndex: segHCoords.stackDepth + 1,\n            left: left * 100 + '%',\n            right: right * 100 + '%',\n        };\n        if (shouldOverlap && !segHCoords.stackForward) {\n            // add padding to the edge so that forward stacked events don't cover the resizer's icon\n            props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n        }\n        return props;\n    }\n}\nfunction renderPlainFgSegs(sortedFgSegs, { todayRange, nowDate, eventSelection, eventDrag, eventResize }) {\n    let hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) ||\n        (eventResize ? eventResize.affectedInstances : null) ||\n        {};\n    return (createElement(Fragment, null, sortedFgSegs.map((seg) => {\n        let instanceId = seg.eventRange.instance.instanceId;\n        return (createElement(\"div\", { key: instanceId, style: { visibility: hiddenInstances[instanceId] ? 'hidden' : '' } },\n            createElement(TimeColEvent, Object.assign({ seg: seg, isDragging: false, isResizing: false, isDateSelecting: false, isSelected: instanceId === eventSelection, isShort: false }, getSegMeta(seg, todayRange, nowDate)))));\n    })));\n}\nfunction computeSegVStyle(segVCoords) {\n    if (!segVCoords) {\n        return { top: '', bottom: '' };\n    }\n    return {\n        top: segVCoords.start,\n        bottom: -segVCoords.end,\n    };\n}\nfunction compileSegsFromEntries(segEntries, allSegs) {\n    return segEntries.map((segEntry) => allSegs[segEntry.index]);\n}\n\nclass TimeColsContent extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.splitFgEventSegs = memoize(splitSegsByCol);\n        this.splitBgEventSegs = memoize(splitSegsByCol);\n        this.splitBusinessHourSegs = memoize(splitSegsByCol);\n        this.splitNowIndicatorSegs = memoize(splitSegsByCol);\n        this.splitDateSelectionSegs = memoize(splitSegsByCol);\n        this.splitEventDrag = memoize(splitInteractionByCol);\n        this.splitEventResize = memoize(splitInteractionByCol);\n        this.rootElRef = createRef();\n        this.cellElRefs = new RefMap();\n    }\n    render() {\n        let { props, context } = this;\n        let nowIndicatorTop = context.options.nowIndicator &&\n            props.slatCoords &&\n            props.slatCoords.safeComputeTop(props.nowDate); // might return void\n        let colCnt = props.cells.length;\n        let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n        let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n        let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n        let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n        let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n        let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n        let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n        return (createElement(\"div\", { className: \"fc-timegrid-cols\", ref: this.rootElRef },\n            createElement(\"table\", { role: \"presentation\", style: {\n                    minWidth: props.tableMinWidth,\n                    width: props.clientWidth,\n                } },\n                props.tableColGroupNode,\n                createElement(\"tbody\", { role: \"presentation\" },\n                    createElement(\"tr\", { role: \"row\" },\n                        props.axis && (createElement(\"td\", { \"aria-hidden\": true, className: \"fc-timegrid-col fc-timegrid-axis\" },\n                            createElement(\"div\", { className: \"fc-timegrid-col-frame\" },\n                                createElement(\"div\", { className: \"fc-timegrid-now-indicator-container\" }, typeof nowIndicatorTop === 'number' && (createElement(NowIndicatorContainer, { elClasses: ['fc-timegrid-now-indicator-arrow'], elStyle: { top: nowIndicatorTop }, isAxis: true, date: props.nowDate })))))),\n                        props.cells.map((cell, i) => (createElement(TimeCol, { key: cell.key, elRef: this.cellElRefs.createRef(cell.key), dateProfile: props.dateProfile, date: cell.date, nowDate: props.nowDate, todayRange: props.todayRange, extraRenderProps: cell.extraRenderProps, extraDataAttrs: cell.extraDataAttrs, extraClassNames: cell.extraClassNames, extraDateSpan: cell.extraDateSpan, fgEventSegs: fgEventSegsByRow[i], bgEventSegs: bgEventSegsByRow[i], businessHourSegs: businessHourSegsByRow[i], nowIndicatorSegs: nowIndicatorSegsByRow[i], dateSelectionSegs: dateSelectionSegsByRow[i], eventDrag: eventDragByRow[i], eventResize: eventResizeByRow[i], slatCoords: props.slatCoords, eventSelection: props.eventSelection, forPrint: props.forPrint }))))))));\n    }\n    componentDidMount() {\n        this.updateCoords();\n    }\n    componentDidUpdate() {\n        this.updateCoords();\n    }\n    updateCoords() {\n        let { props } = this;\n        if (props.onColCoords &&\n            props.clientWidth !== null // means sizing has stabilized\n        ) {\n            props.onColCoords(new PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true, // horizontal\n            false));\n        }\n    }\n}\nfunction collectCellEls(elMap, cells) {\n    return cells.map((cell) => elMap[cell.key]);\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\nclass TimeCols extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.processSlotOptions = memoize(processSlotOptions);\n        this.state = {\n            slatCoords: null,\n        };\n        this.handleRootEl = (el) => {\n            if (el) {\n                this.context.registerInteractiveComponent(this, {\n                    el,\n                    isHitComboAllowed: this.props.isHitComboAllowed,\n                });\n            }\n            else {\n                this.context.unregisterInteractiveComponent(this);\n            }\n        };\n        this.handleScrollRequest = (request) => {\n            let { onScrollTopRequest } = this.props;\n            let { slatCoords } = this.state;\n            if (onScrollTopRequest && slatCoords) {\n                if (request.time) {\n                    let top = slatCoords.computeTimeTop(request.time);\n                    top = Math.ceil(top); // zoom can give weird floating-point values. rather scroll a little bit further\n                    if (top) {\n                        top += 1; // to overcome top border that slots beyond the first have. looks better\n                    }\n                    onScrollTopRequest(top);\n                }\n                return true;\n            }\n            return false;\n        };\n        this.handleColCoords = (colCoords) => {\n            this.colCoords = colCoords;\n        };\n        this.handleSlatCoords = (slatCoords) => {\n            this.setState({ slatCoords });\n            if (this.props.onSlatCoords) {\n                this.props.onSlatCoords(slatCoords);\n            }\n        };\n    }\n    render() {\n        let { props, state } = this;\n        return (createElement(\"div\", { className: \"fc-timegrid-body\", ref: this.handleRootEl, style: {\n                // these props are important to give this wrapper correct dimensions for interactions\n                // TODO: if we set it here, can we avoid giving to inner tables?\n                width: props.clientWidth,\n                minWidth: props.tableMinWidth,\n            } },\n            createElement(TimeColsSlats, { axis: props.axis, dateProfile: props.dateProfile, slatMetas: props.slatMetas, clientWidth: props.clientWidth, minHeight: props.expandRows ? props.clientHeight : '', tableMinWidth: props.tableMinWidth, tableColGroupNode: props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */, onCoords: this.handleSlatCoords }),\n            createElement(TimeColsContent, { cells: props.cells, axis: props.axis, dateProfile: props.dateProfile, businessHourSegs: props.businessHourSegs, bgEventSegs: props.bgEventSegs, fgEventSegs: props.fgEventSegs, dateSelectionSegs: props.dateSelectionSegs, eventSelection: props.eventSelection, eventDrag: props.eventDrag, eventResize: props.eventResize, todayRange: props.todayRange, nowDate: props.nowDate, nowIndicatorSegs: props.nowIndicatorSegs, clientWidth: props.clientWidth, tableMinWidth: props.tableMinWidth, tableColGroupNode: props.tableColGroupNode, slatCoords: state.slatCoords, onColCoords: this.handleColCoords, forPrint: props.forPrint })));\n    }\n    componentDidMount() {\n        this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n    }\n    componentDidUpdate(prevProps) {\n        this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n    }\n    componentWillUnmount() {\n        this.scrollResponder.detach();\n    }\n    queryHit(positionLeft, positionTop) {\n        let { dateEnv, options } = this.context;\n        let { colCoords } = this;\n        let { dateProfile } = this.props;\n        let { slatCoords } = this.state;\n        let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration);\n        let colIndex = colCoords.leftToIndex(positionLeft);\n        let slatIndex = slatCoords.positions.topToIndex(positionTop);\n        if (colIndex != null && slatIndex != null) {\n            let cell = this.props.cells[colIndex];\n            let slatTop = slatCoords.positions.tops[slatIndex];\n            let slatHeight = slatCoords.positions.getHeight(slatIndex);\n            let partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n            let localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n            let snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n            let dayDate = this.props.cells[colIndex].date;\n            let time = addDurations(dateProfile.slotMinTime, multiplyDuration(snapDuration, snapIndex));\n            let start = dateEnv.add(dayDate, time);\n            let end = dateEnv.add(start, snapDuration);\n            return {\n                dateProfile,\n                dateSpan: Object.assign({ range: { start, end }, allDay: false }, cell.extraDateSpan),\n                dayEl: colCoords.els[colIndex],\n                rect: {\n                    left: colCoords.lefts[colIndex],\n                    right: colCoords.rights[colIndex],\n                    top: slatTop,\n                    bottom: slatTop + slatHeight,\n                },\n                layer: 0,\n            };\n        }\n        return null;\n    }\n}\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n    let snapDuration = snapDurationOverride || slotDuration;\n    let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n    if (snapsPerSlot === null) {\n        snapDuration = slotDuration;\n        snapsPerSlot = 1;\n        // TODO: say warning?\n    }\n    return { snapDuration, snapsPerSlot };\n}\n\nclass DayTimeColsSlicer extends Slicer {\n    sliceRange(range, dayRanges) {\n        let segs = [];\n        for (let col = 0; col < dayRanges.length; col += 1) {\n            let segRange = intersectRanges(range, dayRanges[col]);\n            if (segRange) {\n                segs.push({\n                    start: segRange.start,\n                    end: segRange.end,\n                    isStart: segRange.start.valueOf() === range.start.valueOf(),\n                    isEnd: segRange.end.valueOf() === range.end.valueOf(),\n                    col,\n                });\n            }\n        }\n        return segs;\n    }\n}\n\nclass DayTimeCols extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.buildDayRanges = memoize(buildDayRanges);\n        this.slicer = new DayTimeColsSlicer();\n        this.timeColsRef = createRef();\n    }\n    render() {\n        let { props, context } = this;\n        let { dateProfile, dayTableModel } = props;\n        let { nowIndicator, nextDayThreshold } = context.options;\n        let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);\n        // give it the first row of cells\n        // TODO: would move this further down hierarchy, but sliceNowDate needs it\n        return (createElement(NowTimer, { unit: nowIndicator ? 'minute' : 'day' }, (nowDate, todayRange) => (createElement(TimeCols, Object.assign({ ref: this.timeColsRef }, this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), { forPrint: props.forPrint, axis: props.axis, dateProfile: dateProfile, slatMetas: props.slatMetas, slotDuration: props.slotDuration, cells: dayTableModel.cells[0], tableColGroupNode: props.tableColGroupNode, tableMinWidth: props.tableMinWidth, clientWidth: props.clientWidth, clientHeight: props.clientHeight, expandRows: props.expandRows, nowDate: nowDate, nowIndicatorSegs: nowIndicator && this.slicer.sliceNowDate(nowDate, dateProfile, nextDayThreshold, context, dayRanges), todayRange: todayRange, onScrollTopRequest: props.onScrollTopRequest, onSlatCoords: props.onSlatCoords })))));\n    }\n}\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n    let ranges = [];\n    for (let date of dayTableModel.headerDates) {\n        ranges.push({\n            start: dateEnv.add(date, dateProfile.slotMinTime),\n            end: dateEnv.add(date, dateProfile.slotMaxTime),\n        });\n    }\n    return ranges;\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [\n    { hours: 1 },\n    { minutes: 30 },\n    { minutes: 15 },\n    { seconds: 30 },\n    { seconds: 15 },\n];\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n    let dayStart = new Date(0);\n    let slatTime = slotMinTime;\n    let slatIterator = createDuration(0);\n    let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n    let metas = [];\n    while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n        let date = dateEnv.add(dayStart, slatTime);\n        let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null;\n        metas.push({\n            date,\n            time: slatTime,\n            key: date.toISOString(),\n            isoTimeStr: formatIsoTimeString(date),\n            isLabeled,\n        });\n        slatTime = addDurations(slatTime, slotDuration);\n        slatIterator = addDurations(slatIterator, slotDuration);\n    }\n    return metas;\n}\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n    let i;\n    let labelInterval;\n    let slotsPerLabel;\n    // find the smallest stock label interval that results in more than one slots-per-label\n    for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n        labelInterval = createDuration(STOCK_SUB_DURATIONS[i]);\n        slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n        if (slotsPerLabel !== null && slotsPerLabel > 1) {\n            return labelInterval;\n        }\n    }\n    return slotDuration; // fall back\n}\n\nclass DayTimeColsView extends TimeColsView {\n    constructor() {\n        super(...arguments);\n        this.buildTimeColsModel = memoize(buildTimeColsModel);\n        this.buildSlatMetas = memoize(buildSlatMetas);\n    }\n    render() {\n        let { options, dateEnv, dateProfileGenerator } = this.context;\n        let { props } = this;\n        let { dateProfile } = props;\n        let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n        let splitProps = this.allDaySplitter.splitProps(props);\n        let slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n        let { dayMinWidth } = options;\n        let hasAttachedAxis = !dayMinWidth;\n        let hasDetachedAxis = dayMinWidth;\n        let headerContent = options.dayHeaders && (createElement(DayHeader, { dates: dayTableModel.headerDates, dateProfile: dateProfile, datesRepDistinctDays: true, renderIntro: hasAttachedAxis ? this.renderHeadAxis : null }));\n        let allDayContent = (options.allDaySlot !== false) && ((contentArg) => (createElement(DayTable, Object.assign({}, splitProps.allDay, { dateProfile: dateProfile, dayTableModel: dayTableModel, nextDayThreshold: options.nextDayThreshold, tableMinWidth: contentArg.tableMinWidth, colGroupNode: contentArg.tableColGroupNode, renderRowIntro: hasAttachedAxis ? this.renderTableRowAxis : null, showWeekNumbers: false, expandRows: false, headerAlignElRef: this.headerElRef, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, forPrint: props.forPrint }, this.getAllDayMaxEventProps()))));\n        let timeGridContent = (contentArg) => (createElement(DayTimeCols, Object.assign({}, splitProps.timed, { dayTableModel: dayTableModel, dateProfile: dateProfile, axis: hasAttachedAxis, slotDuration: options.slotDuration, slatMetas: slatMetas, forPrint: props.forPrint, tableColGroupNode: contentArg.tableColGroupNode, tableMinWidth: contentArg.tableMinWidth, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, onSlatCoords: this.handleSlatCoords, expandRows: contentArg.expandRows, onScrollTopRequest: this.handleScrollTopRequest })));\n        return hasDetachedAxis\n            ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords)\n            : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n    }\n}\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n    let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n    return new DayTableModel(daySeries, false);\n}\n\nexport { DayTimeCols, DayTimeColsSlicer, DayTimeColsView, TimeCols, TimeColsSlatsCoords, TimeColsView, buildDayRanges, buildSlatMetas, buildTimeColsModel };\n","import { createPlugin } from '@fullcalendar/core/index.js';\nimport { DayTimeColsView } from './internal.js';\nimport '@fullcalendar/core/internal.js';\nimport '@fullcalendar/core/preact.js';\nimport '@fullcalendar/daygrid/internal.js';\n\nconst OPTION_REFINERS = {\n    allDaySlot: Boolean,\n};\n\nvar index = createPlugin({\n    name: '@fullcalendar/timegrid',\n    initialView: 'timeGridWeek',\n    optionRefiners: OPTION_REFINERS,\n    views: {\n        timeGrid: {\n            component: DayTimeColsView,\n            usesMinMaxTime: true,\n            allDaySlot: true,\n            slotDuration: '00:30:00',\n            slotEventOverlap: true, // a bad name. confused with overlap/constraint system\n        },\n        timeGridDay: {\n            type: 'timeGrid',\n            duration: { days: 1 },\n        },\n        timeGridWeek: {\n            type: 'timeGrid',\n            duration: { weeks: 1 },\n        },\n    },\n});\n\nexport { index as default };\n"],"names":["injectStyles","AllDaySplitter","Splitter","getKeyInfo","allDay","timed","getKeysForDateSpan","dateSpan","getKeysForEventDef","eventDef","hasBgRendering","DEFAULT_SLAT_LABEL_FORMAT","createFormatter","hour","minute","omitZeroMinute","meridiem","TimeColsAxisCell","props","classNames","isLabeled","createElement","ViewContextType","Consumer","context","className","join","isoTimeStr","dateEnv","options","viewApi","labelFormat","slotLabelFormat","Array","isArray","renderProps","level","time","date","toDate","view","text","format","ContentContainer","elTag","elClasses","elAttrs","generatorName","customGenerator","slotLabelContent","defaultGenerator","renderInnerContent","classNameGenerator","slotLabelClassNames","didMount","slotLabelDidMount","willUnmount","slotLabelWillUnmount","InnerContent","TimeBodyAxis","BaseComponent","render","this","slatMetas","map","slatMeta","key","Object","assign","DEFAULT_WEEK_NUM_FORMAT","week","TimeColsView","DateComponent","constructor","_this","super","arguments","allDaySplitter","headerElRef","createRef","rootElRef","scrollerElRef","state","slatCoords","handleScrollTopRequest","scrollTop","scrollerEl","current","renderHeadAxis","rowKey","frameHeight","length","undefined","dateProfile","range","renderRange","navLinkAttrs","diffDays","start","end","buildNavLinkAttrs","weekNumbers","WeekNumberContainer","defaultFormat","style","height","renderTableRowAxis","rowHeight","allDayText","allDayContent","renderAllDayInner","allDayClassNames","allDayDidMount","allDayWillUnmount","handleSlatCoords","setState","renderSimpleLayout","headerRowContent","timeContent","sections","stickyHeaderDates","getStickyHeaderDates","push","type","isSticky","chunk","elRef","tableClassName","rowContent","content","outerContent","role","theme","getClass","liquid","expandRows","Boolean","ViewContainer","viewSpec","SimpleScrollGrid","isHeightAuto","forPrint","collapsibleWidth","cols","width","renderHScrollLayout","colCnt","dayMinWidth","ScrollGrid","pluginHooks","scrollGridImpl","Error","stickyFooterScrollbar","getStickyFooterScrollbar","syncRowHeights","chunks","arg","rowSyncHeights","contentArg","colSpan","isNowIndicator","nowIndicator","clientHeight","tableColGroupNode","NowTimer","unit","nowDate","nowIndicatorTop","safeComputeTop","NowIndicatorContainer","elStyle","top","isAxis","renderScrollShim","colGroups","span","minWidth","getAllDayMaxEventProps","dayMaxEvents","dayMaxEventRows","TimeColsSlatsCoords","positions","slotDuration","rangeContainsMarker","currentRange","startOfDayDate","startOfDay","timeMs","valueOf","asRoughMs","slotMinTime","slotMaxTime","computeTimeTop","createDuration","computeDateTop","when","duration","slatIndex","slatRemainder","len","els","slatCoverage","milliseconds","Math","max","min","floor","tops","getHeight","TimeColsSlatsBody","slatElRefs","i","ref","axis","slotLaneContent","slotLaneClassNames","slotLaneDidMount","slotLaneWillUnmount","TimeColsSlats","RefMap","tableMinWidth","clientWidth","minHeight","componentDidMount","updateSizing","componentDidUpdate","componentWillUnmount","onCoords","offsetHeight","PositionCache","elMap","currentMap","splitSegsByCol","segs","segsByCol","col","splitInteractionByCol","ui","byRow","affectedInstances","isEvent","seg","TimeColMoreLink","MoreLinkContainer","bottom","allDayDate","moreCnt","hiddenSegs","allSegs","extraDateSpan","todayRange","popoverContent","renderPlainFgSegs","renderMoreLinkInner","forceTimed","shortText","buildPositioning","segInputs","strictOrder","maxStackCnt","hierarchy","SegHierarchy","hiddenEntries","addSegs","hiddenGroups","groupIntersectingEntries","web","entriesByLevel","buildNode","cacheable","lateral","siblingRange","subjectLevel","subjectLateral","levelCoords","subjectEntry","afterSubject","thickness","levelCnt","entry","entries","searchIndex","binarySearch","getEntrySpanEnd","lateralStart","lateralEnd","findNextLevelSegs","nextLevelRes","buildNodes","nextLevelNodes","buildWeb","topLevelNodes","totalThickness","stretchNode","node","startCoord","prevThickness","buildEntryKey","endCoord","allThickness","thicknessFraction","newChildren","childNode","res","newThickness","stretchWeb","segRects","rects","processNode","levelCoord","stackDepth","rect","stackForward","processNodes","nodes","webToRects","pairs","sort","cmpDescPressures","extractNode","a","b","keyFunc","workFunc","cache","computeSegVCoords","colDate","eventMinHeight","vcoords","spanStart","spanEnd","round","DEFAULT_TIME_FORMAT","TimeColEvent","StandardEvent","isShort","defaultTimeFormat","TimeCol","sortEventSegs","memoize","isSelectMirror","selectMirror","mirrorSegs","eventDrag","eventResize","dateSelectionSegs","interactionAffectedInstances","sortedFgSegs","fgEventSegs","eventOrder","DayCellContainer","extraClassNames","extraDataAttrs","extraRenderProps","renderFillSegs","businessHourSegs","bgEventSegs","renderFgSegs","renderNowIndicator","nowIndicatorSegs","hasCustomDayCellContent","segIsInvisible","isDragging","isResizing","isDateSelecting","forcedKey","renderPositionedFgSegs","eventMaxStack","eventShortHeight","eventOrderStrict","eventSelection","isMirror","segVCoords","segPlacements","dumbSegs","index","segRect","dumbSeg","computeFgSegPlacements","Fragment","renderHiddenGroups","segPlacement","instanceId","eventRange","instance","isVisible","vStyle","computeSegVStyle","hStyle","computeSegHStyle","left","right","isInset","visibility","isSelected","getSegMeta","hiddenGroup","positionCss","segEntries","segEntry","buildIsoString","computeEarliestSegStart","fillType","children","buildEventRangeKey","BgEvent","renderFill","segHCoords","isRtl","shouldOverlap","slotEventOverlap","nearCoord","farCoord","zIndex","_ref","hiddenInstances","TimeColsContent","splitFgEventSegs","splitBgEventSegs","splitBusinessHourSegs","splitNowIndicatorSegs","splitDateSelectionSegs","splitEventDrag","splitEventResize","cellElRefs","cells","fgEventSegsByRow","bgEventSegsByRow","businessHourSegsByRow","nowIndicatorSegsByRow","dateSelectionSegsByRow","eventDragByRow","eventResizeByRow","cell","updateCoords","onColCoords","TimeCols","processSlotOptions","handleRootEl","el","registerInteractiveComponent","isHitComboAllowed","unregisterInteractiveComponent","handleScrollRequest","request","onScrollTopRequest","ceil","handleColCoords","colCoords","onSlatCoords","scrollResponder","createScrollResponder","prevProps","update","detach","queryHit","positionLeft","positionTop","snapDuration","snapsPerSlot","colIndex","leftToIndex","topToIndex","slatTop","slatHeight","partial","snapIndex","dayDate","addDurations","multiplyDuration","add","dayEl","lefts","rights","layer","snapDurationOverride","wholeDivideDurations","DayTimeColsSlicer","Slicer","sliceRange","dayRanges","segRange","intersectRanges","isStart","isEnd","DayTimeCols","buildDayRanges","slicer","timeColsRef","dayTableModel","nextDayThreshold","sliceProps","sliceNowDate","ranges","headerDates","STOCK_SUB_DURATIONS","hours","minutes","seconds","buildSlatMetas","explicitLabelInterval","dayStart","Date","slatTime","slatIterator","labelInterval","slotsPerLabel","computeLabelInterval","metas","toISOString","formatIsoTimeString","buildTimeColsModel","dateProfileGenerator","daySeries","DaySeriesModel","DayTableModel","OPTION_REFINERS","allDaySlot","createPlugin","name","initialView","optionRefiners","views","timeGrid","component","splitProps","slotLabelInterval","hasAttachedAxis","hasDetachedAxis","headerContent","dayHeaders","DayHeader","dates","datesRepDistinctDays","renderIntro","DayTable","colGroupNode","renderRowIntro","showWeekNumbers","headerAlignElRef","timeGridContent","usesMinMaxTime","timeGridDay","days","timeGridWeek","weeks"],"sourceRoot":""}